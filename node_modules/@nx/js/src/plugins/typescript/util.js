"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addBuildAndWatchDepsTargets = addBuildAndWatchDepsTargets;
const devkit_1 = require("@nx/devkit");
const node_fs_1 = require("node:fs");
const path_1 = require("path");
/**
 * Allow uses that use incremental builds to run `nx watch-deps` to continuously build all dependencies.
 */
function addBuildAndWatchDepsTargets(workspaceRoot, projectRoot, targets, options, pmc) {
    let projectName;
    const projectJsonPath = (0, path_1.join)(workspaceRoot, projectRoot, 'project.json');
    const packageJsonPath = (0, path_1.join)(workspaceRoot, projectRoot, 'package.json');
    if ((0, node_fs_1.existsSync)(projectJsonPath)) {
        const projectJson = (0, devkit_1.readJsonFile)(projectJsonPath);
        projectName = projectJson.name;
    }
    else if ((0, node_fs_1.existsSync)(packageJsonPath)) {
        const packageJson = (0, devkit_1.readJsonFile)(packageJsonPath);
        projectName = packageJson.nx?.name ?? packageJson.name;
    }
    if (!projectName)
        return;
    if (projectName) {
        const buildDepsTargetName = options.buildDepsTargetName ?? 'build-deps';
        targets[buildDepsTargetName] = {
            dependsOn: ['^build'],
        };
        targets[options.watchDepsTargetName ?? 'watch-deps'] = {
            dependsOn: [buildDepsTargetName],
            command: `${pmc.exec} nx watch --projects ${projectName} --includeDependentProjects -- ${pmc.exec} nx ${buildDepsTargetName} ${projectName}`,
        };
    }
}
